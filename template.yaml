AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Order Processing System

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Tracing: Active  # Enable X-Ray tracing
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: OrderProcessingSystem
        POWERTOOLS_METRICS_NAMESPACE: OrderProcessing

Resources:
  ###################################################
  # DynamoDB Tables
  ###################################################
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdersTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: OrderId
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: CustomerName
          AttributeType: S
      KeySchema:
        - AttributeName: OrderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: CustomerIndex
          KeySchema:
            - AttributeName: CustomerName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: InventoryTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ItemName
          AttributeType: S
      KeySchema:
        - AttributeName: ItemName
          KeyType: HASH

  ###################################################
  # SQS Queues with Dead Letter Queue
  ###################################################
  OrdersDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrdersDeadLetterQueue
      MessageRetentionPeriod: 1209600  # 14 days

  OrdersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrdersQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrdersDeadLetterQueue.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 300

  ###################################################
  # Order Submission (.NET 8)
  ###################################################
  OrderSubmissionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: OrderSubmission
      CodeUri: ./OrderSubmission/
      Handler: OrderSubmission::OrderSubmission.OrderHandler::SubmitOrder
      Runtime: dotnet8
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /submitorder
            Method: post
            Auth:
              ApiKeyRequired: true

  ###################################################
  # Order Processing Lambda (DynamoDB Stream -> SQS)
  ###################################################
  OrderProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: OrderProcessing
      CodeUri: ./OrderProcessing/
      Handler: OrderProcessing.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          INVENTORY_TABLE: !Ref InventoryTable
          SQS_QUEUE_URL: !Ref OrdersQueue
          ORDERS_TABLE: !Ref OrdersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InventoryTable
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt OrdersQueue.QueueName
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !GetAtt OrdersTable.StreamArn
      Events:
        OrderStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt OrdersTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
            Enabled: true

  ###################################################
  # SQS Processor Lambda (Triggers Step Functions)
  ###################################################
  SQSProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SQSProcessor
      CodeUri: ./SQSProcessorFunction/
      Handler: sqsprocessor.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref OrderWorkflow
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt OrderWorkflow.Name
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrdersQueue.Arn
            BatchSize: 1

  ###################################################
  # Payment Lambda
  ###################################################
  PaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PaymentProcessor
      CodeUri: ./payment/
      Handler: PaymentProcessor.lambda_handler
      Runtime: python3.12

  ###################################################
  # Shipping Lambda
  ###################################################
  ShippingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ShippingProcessor
      CodeUri: ./shipping/
      Handler: ShippingProcessor.lambda_handler
      Runtime: python3.12

  ###################################################
  # Step Functions Workflow
  ###################################################
  OrderWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: OrderWorkflow
      DefinitionString:
        Fn::Sub: |
          {
            "Comment": "Enhanced Order Processing Workflow with Error Handling",
            "StartAt": "PaymentStep",
            "States": {
              "PaymentStep": {
                "Type": "Task",
                "Resource": "${PaymentFunction.Arn}",
                "Retry": [
                  {
                    "ErrorEquals": ["States.TaskFailed"],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 3,
                    "BackoffRate": 2.0
                  },
                  {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 1,
                    "BackoffRate": 2.0
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "PaymentFailed",
                    "ResultPath": "$.error"
                  }
                ],
                "Next": "CheckPaymentStatus"
              },
              "CheckPaymentStatus": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.payment_status",
                    "StringEquals": "SUCCESS",
                    "Next": "ShippingStep"
                  }
                ],
                "Default": "PaymentFailed"
              },
              "ShippingStep": {
                "Type": "Task",
                "Resource": "${ShippingFunction.Arn}",
                "Retry": [
                  {
                    "ErrorEquals": ["States.TaskFailed"],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 2,
                    "BackoffRate": 2.0
                  },
                  {
                    "ErrorEquals": ["States.ALL"],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 1,
                    "BackoffRate": 2.0
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "ShippingFailed",
                    "ResultPath": "$.error"
                  }
                ],
                "Next": "OrderCompleted"
              },
              "OrderCompleted": {
                "Type": "Pass",
                "Result": {
                  "status": "COMPLETED",
                  "message": "Order processed successfully"
                },
                "End": true
              },
              "PaymentFailed": {
                "Type": "Pass",
                "Result": {
                  "status": "PAYMENT_FAILED",
                  "message": "Payment processing failed"
                },
                "End": true
              },
              "ShippingFailed": {
                "Type": "Pass",
                "Result": {
                  "status": "SHIPPING_FAILED",
                  "message": "Shipping processing failed"
                },
                "End": true
              }
            }
          }
      RoleArn: !GetAtt OrderWorkflowRole.Arn

  ###################################################
  # Step Functions Role
  ###################################################
  OrderWorkflowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OrderWorkflowPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  ###################################################
  # Cognito User Pool (Optional - for JWT authentication)
  ###################################################
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: OrderProcessingUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: OrderProcessingClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  ###################################################
  # API Gateway Authentication
  ###################################################
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: OrderProcessingApiKey
      Description: API Key for Order Processing System
      Enabled: true

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: OrderProcessingUsagePlan
      Description: Usage plan for Order Processing API
      Throttle:
        BurstLimit: 100
        RateLimit: 50
      Quota:
        Limit: 10000
        Period: DAY
      ApiStages:
        - ApiId: !Ref ServerlessRestApi
          Stage: !Ref ServerlessRestApiProdStage

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  ###################################################
  # CloudWatch Alarms
  ###################################################
  OrderSubmissionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: OrderSubmission-Errors
      AlarmDescription: Alert when order submission function has errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref OrderSubmissionFunction

  DeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: OrdersDeadLetterQueue-Messages
      AlarmDescription: Alert when messages appear in dead letter queue
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt OrdersDeadLetterQueue.QueueName

  StepFunctionFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: OrderWorkflow-Failures
      AlarmDescription: Alert when Step Function executions fail
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref OrderWorkflow

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/submitorder"
  OrdersTableName:
    Description: "Orders Table Name"
    Value: !Ref OrdersTable
  InventoryTableName:
    Description: "Inventory Table Name"
    Value: !Ref InventoryTable
  OrdersQueueUrl:
    Description: "Orders Queue URL"
    Value: !Ref OrdersQueue
  OrdersDeadLetterQueueUrl:
    Description: "Orders Dead Letter Queue URL"
    Value: !Ref OrdersDeadLetterQueue
  StepFunctionArn:
    Description: "Step Function ARN"
    Value: !Ref OrderWorkflow
  ApiKeyId:
    Description: "API Key ID"
    Value: !Ref ApiKey
